version: 2.1
# Use a package of configuration called an orb.
orbs:
    aws-cli: circleci/aws-cli@3.1
# Define the jobs we want to run for this project
# Job 1
  # Executes the bucket.yml - Deploy an S3 bucket, and interface with that bucket to synchronize the files between local and the bucket.
  # Note that the `--parameter-overrides` let you specify a value that override parameter value in the bucket.yml template file.
jobs:
  # create_and_deploy_front_end:
  #   executor: aws-cli/default
  #   steps:
  #     - checkout
  #     - aws-cli/setup:
  #           aws-access-key-id: AWS_ACCESS_KEY
  #           aws-secret-access-key: AWS_ACCESS_SECRET
  #           aws-region: AWS_REGION_NAME
  #     - run:
  #         name: Execute bucket.yml - Create Cloudformation Stack
  #         command: |
  #           aws cloudformation deploy \
  #           --template-file bucket.yml \
  #           --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
  #           --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
      # Uncomment the step below if you wish to upload all contents of the current directory to the S3 bucket
      # - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete
  
  # Exercise: Promote to Production - Job 2
  # Fetch and save the pipeline ID (bucket ID) responsible for the last release.
  get_last_deployment_id:
    executor: aws-cli/default
    steps:
      - checkout
      # - run: sudo apt-get install build essential
      - aws-cli/setup:
            aws-access-key-id: AWS_ACCESS_KEY
            aws-secret-access-key: AWS_ACCESS_SECRET
            aws-region: AWS_REGION_NAME
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/textfile.txt
      - run:
          echo ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - textfile.txt 
  
  # Exercise: Promote to Production - Job 3
  # Executes the cloudfront.yml template that will modify the existing CloudFront Distribution, change its target from the old bucket to the new bucket - `mybucket-${CIRCLE_WORKFLOW_ID:0:7}`. 
  # Notice here we use the stack name `production-distro` which is the same name we used while deploying to the S3 bucket manually.
  # promote_to_production:
  #   executor: aws-cli/default
  #   steps:
  #     - checkout
  #     - aws-cli/setup:
  #           aws-access-key-id: AWS_ACCESS_KEY
  #           aws-secret-access-key: AWS_ACCESS_SECRET
  #           aws-region: AWS_REGION_NAME
  #     - run:
  #         name: Execute cloudfront.yml
  #         command: |
  #           aws cloudformation deploy \
  #           --template-file cloudfront.yml \
  #           --stack-name production-distro \
  #           --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"

  # Exercise: Promote to Production - Job 4
  # Destroy the previous production version's S3 bucket and CloudFormation stack. 
  clean_up_old_front_end:
    executor: aws-cli/default
    steps:
      - checkout
      # - run: yum install -y tar gzip
      - aws-cli/setup:
            aws-access-key-id: AWS_ACCESS_KEY
            aws-secret-access-key: AWS_ACCESS_SECRET
            aws-region: AWS_REGION_NAME
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous production version's S3 bucket and CloudFormation stack. 
          # Use $OldBucketID environment variable or mybucket644752792305 below.
          # Similarly, you can create and use $OldStackID environment variable in place of production-distro 
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            echo $OldBucketID
            aws s3 rm "s3://${OldBucketID}" --recursive
          #  aws cloudformation delete-stack --stack-name production-distro 
          #  aws cloudformation delete-stack --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7}
          #  aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}



workflows:
  # Name the workflow "welcome"
  my_workflow:
    # Run the welcome/run job in its own container
    jobs:
      # - welcome/run
      # - print_greetings
      # - upload_file
      # - download_file:
      #     requires:
      #       - upload_file
      # - create_infrastructure
      # - configure_infrastructure
      # - create_and_deploy_front_end
      # - promote_to_production:
      #     requires: 
      #       - create_and_deploy_front_end
      - get_last_deployment_id
      - clean_up_old_front_end:
          requires:
            - get_last_deployment_id
            # - promote_to_production